name: .NET Build and Test with Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'   # or '8.0.x' if your project targets .NET 8

      # 3Ô∏è‚É£ Restore dependencies
      - name: Restore dependencies
        run: dotnet restore CalculatorApp.sln

      # 4Ô∏è‚É£ Build solution
      - name: Build
        run: dotnet build CalculatorApp.sln --no-restore --configuration Release

      # 5Ô∏è‚É£ Run tests and generate Cobertura coverage
      - name: Run tests with coverage
        run: |
          mkdir -p TestResults/coverage
          for proj in $(find . -name "*.Tests.csproj"); do
            echo "Running tests for $proj ..."
            dotnet test "$proj" \
              --no-build \
              --configuration Release \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=cobertura \
              /p:CoverletOutput=../../TestResults/coverage/coverage.cobertura.xml
    done

    # Verify coverage file created
    if [ ! -f TestResults/coverage/coverage.cobertura.xml ]; then
      echo "‚ùå coverage.cobertura.xml not found after running tests"
      ls -R TestResults || true
      exit 1
    else
      echo "‚úÖ coverage.cobertura.xml successfully generated"
    fi


      # 6Ô∏è‚É£ Auto-detect coverage file path
      - name: Find coverage report file
        id: find_coverage
        run: |
          echo "üîç Searching for coverage.cobertura.xml..."
          file=$(find ./ -type f -name "coverage.cobertura.xml" | head -1)
          if [ -z "$file" ]; then
            echo "‚ùå No coverage.cobertura.xml file found!"
            exit 1
          fi
          echo "‚úÖ Found coverage report at: $file"
          echo "coverage_file=$file" >> $GITHUB_OUTPUT

      # 7Ô∏è‚É£ Generate HTML coverage report
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
        with:
          reports: '${{ steps.find_coverage.outputs.coverage_file }}'
          targetdir: './CodeCoverageReport'
          reporttypes: 'HtmlSummary;Cobertura'

      # 8Ô∏è‚É£ Check coverage threshold (optional)
      - name: Check coverage threshold
        run: |
          coverage=$(grep -oP '(?<=<coverage line-rate=")[0-9.]+(?=")' "${{ steps.find_coverage.outputs.coverage_file }}" | head -1)
          percent=$(awk "BEGIN {printf \"%.0f\", $coverage * 100}")
          echo "üìä Code coverage: ${percent}%"
          if [ "$percent" -lt 80 ]; then
            echo "‚ùå Coverage below 80%. Failing build."
            exit 1
          else
            echo "‚úÖ Coverage meets threshold."
          fi

      # 9Ô∏è‚É£ Upload HTML report as artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReport
          path: ./CodeCoverageReport
