name: .NET Build and Test with Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Setup .NET environment (GitHub installs .NET SDK automatically)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3️⃣ Restore dependencies (if a solution file exists)
      - name: Restore dependencies
        run: |
          if [ -f "./dotnet-sample.sln" ]; then
            echo "Found solution file, restoring dependencies..."
            dotnet restore dotnet-sample.sln
          else
            echo "No solution file found. Creating one automatically..."
            dotnet new sln -n dotnet-sample
            # Add all .csproj files to solution
            for proj in $(find . -name "*.csproj"); do
              dotnet sln dotnet-sample.sln add "$proj"
            done
            echo "✅ Solution file created and projects added."
            dotnet restore dotnet-sample.sln
          fi

      # 4️⃣ Build the project
      - name: Build project
        run: dotnet build dotnet-sample.sln --no-restore

           # 5️⃣ Run tests with coverage (store output in known folder)
      - name: Run tests with coverage
        run: |
          mkdir -p ./TestResults
          dotnet test dotnet-sample.sln --collect:"XPlat Code Coverage" --results-directory ./TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
          echo "✅ Test execution complete. Checking for coverage results..."
          find ./TestResults -name "coverage.cobertura.xml" || echo "⚠️ No coverage file found"

      # 6️⃣ Install ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # 7️⃣ Generate coverage report
      - name: Generate coverage report
        run: |
          echo "Searching for coverage files..."
          reportgenerator -reports:"./TestResults/**/coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:Html
          echo "✅ Coverage report generated at ./coveragereport/index.html"

      # 8️⃣ Upload coverage report as artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Report
          path: coveragereport
